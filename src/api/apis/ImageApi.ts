/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FilePost200Response,
  ImageGet200Response,
  ModelsIDListRequest,
} from '../models/index';
import {
    FilePost200ResponseFromJSON,
    FilePost200ResponseToJSON,
    ImageGet200ResponseFromJSON,
    ImageGet200ResponseToJSON,
    ModelsIDListRequestFromJSON,
    ModelsIDListRequestToJSON,
} from '../models/index';

export interface ImageDeleteRequest {
    data: ModelsIDListRequest;
}

export interface ImageGetRequest {
    key?: string;
    limit?: number;
    order?: string;
    page?: number;
    userID?: number;
}

export interface ImagePostRequest {
    file: Blob;
}

/**
 * 
 */
export class ImageApi extends runtime.BaseAPI {

    /**
     * 删除图片
     * 删除图片
     */
    async imageDeleteRaw(requestParameters: ImageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilePost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling imageDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/image`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsIDListRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 删除图片
     * 删除图片
     */
    async imageDelete(requestParameters: ImageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilePost200Response> {
        const response = await this.imageDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取图片列表
     * 获取图片列表
     */
    async imageGetRaw(requestParameters: ImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['userID'] != null) {
            queryParameters['userID'] = requestParameters['userID'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/image`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取图片列表
     * 获取图片列表
     */
    async imageGet(requestParameters: ImageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageGet200Response> {
        const response = await this.imageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建图片
     * 创建图片
     */
    async imagePostRaw(requestParameters: ImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilePost200Response>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling imagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/image`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FilePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 创建图片
     * 创建图片
     */
    async imagePost(requestParameters: ImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilePost200Response> {
        const response = await this.imagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

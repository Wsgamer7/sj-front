/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CourseApiCreateChapterRequest,
  CourseCreateChapterPost200Response,
  CourseCreateCoursePost200Response,
  CourseGenChapterScorePost200Response,
  CourseGetChaptersPost200Response,
  CourseGetCoursePost200Response,
  CourseGetCourseStudentsPost200Response,
  CourseJoinCoursePost200Response,
  CourseScanAllCoursePost200Response,
  CourseScanCoursePost200Response,
} from '../models/index';
import {
    CourseApiCreateChapterRequestFromJSON,
    CourseApiCreateChapterRequestToJSON,
    CourseCreateChapterPost200ResponseFromJSON,
    CourseCreateChapterPost200ResponseToJSON,
    CourseCreateCoursePost200ResponseFromJSON,
    CourseCreateCoursePost200ResponseToJSON,
    CourseGenChapterScorePost200ResponseFromJSON,
    CourseGenChapterScorePost200ResponseToJSON,
    CourseGetChaptersPost200ResponseFromJSON,
    CourseGetChaptersPost200ResponseToJSON,
    CourseGetCoursePost200ResponseFromJSON,
    CourseGetCoursePost200ResponseToJSON,
    CourseGetCourseStudentsPost200ResponseFromJSON,
    CourseGetCourseStudentsPost200ResponseToJSON,
    CourseJoinCoursePost200ResponseFromJSON,
    CourseJoinCoursePost200ResponseToJSON,
    CourseScanAllCoursePost200ResponseFromJSON,
    CourseScanAllCoursePost200ResponseToJSON,
    CourseScanCoursePost200ResponseFromJSON,
    CourseScanCoursePost200ResponseToJSON,
} from '../models/index';

export interface CourseCreateChapterPostRequest {
    data: CourseApiCreateChapterRequest;
}

export interface CourseCreateCoursePostRequest {
    userID: number;
    courseName: string;
    description: string;
}

export interface CourseGenChapterScorePostRequest {
    chapterID: number;
}

export interface CourseGetChaptersPostRequest {
    courseID: number;
}

export interface CourseGetCoursePostRequest {
    courseID: number;
}

export interface CourseGetCourseStudentsPostRequest {
    courseID: number;
}

export interface CourseJoinCoursePostRequest {
    userID: number;
    courseID: number;
}

export interface CourseScanCoursePostRequest {
    userID: number;
}

/**
 * 
 */
export class CourseApi extends runtime.BaseAPI {

    /**
     * 创建章节
     * 创建章节
     */
    async courseCreateChapterPostRaw(requestParameters: CourseCreateChapterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseCreateChapterPost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseCreateChapterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/create_chapter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiCreateChapterRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseCreateChapterPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 创建章节
     * 创建章节
     */
    async courseCreateChapterPost(requestParameters: CourseCreateChapterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseCreateChapterPost200Response> {
        const response = await this.courseCreateChapterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建课程
     * 创建课程
     */
    async courseCreateCoursePostRaw(requestParameters: CourseCreateCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseCreateCoursePost200Response>> {
        if (requestParameters['userID'] == null) {
            throw new runtime.RequiredError(
                'userID',
                'Required parameter "userID" was null or undefined when calling courseCreateCoursePost().'
            );
        }

        if (requestParameters['courseName'] == null) {
            throw new runtime.RequiredError(
                'courseName',
                'Required parameter "courseName" was null or undefined when calling courseCreateCoursePost().'
            );
        }

        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling courseCreateCoursePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userID'] != null) {
            queryParameters['userID'] = requestParameters['userID'];
        }

        if (requestParameters['courseName'] != null) {
            queryParameters['courseName'] = requestParameters['courseName'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/create_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseCreateCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 创建课程
     * 创建课程
     */
    async courseCreateCoursePost(requestParameters: CourseCreateCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseCreateCoursePost200Response> {
        const response = await this.courseCreateCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生成章节分数
     * 生成章节分数
     */
    async courseGenChapterScorePostRaw(requestParameters: CourseGenChapterScorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGenChapterScorePost200Response>> {
        if (requestParameters['chapterID'] == null) {
            throw new runtime.RequiredError(
                'chapterID',
                'Required parameter "chapterID" was null or undefined when calling courseGenChapterScorePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chapterID'] != null) {
            queryParameters['chapterID'] = requestParameters['chapterID'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/gen_chapter_score`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGenChapterScorePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 生成章节分数
     * 生成章节分数
     */
    async courseGenChapterScorePost(requestParameters: CourseGenChapterScorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGenChapterScorePost200Response> {
        const response = await this.courseGenChapterScorePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取课程章节列表
     * 获取课程章节列表
     */
    async courseGetChaptersPostRaw(requestParameters: CourseGetChaptersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGetChaptersPost200Response>> {
        if (requestParameters['courseID'] == null) {
            throw new runtime.RequiredError(
                'courseID',
                'Required parameter "courseID" was null or undefined when calling courseGetChaptersPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['courseID'] != null) {
            queryParameters['courseID'] = requestParameters['courseID'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/get_chapters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGetChaptersPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取课程章节列表
     * 获取课程章节列表
     */
    async courseGetChaptersPost(requestParameters: CourseGetChaptersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGetChaptersPost200Response> {
        const response = await this.courseGetChaptersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取课程信息
     * 获取课程信息
     */
    async courseGetCoursePostRaw(requestParameters: CourseGetCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGetCoursePost200Response>> {
        if (requestParameters['courseID'] == null) {
            throw new runtime.RequiredError(
                'courseID',
                'Required parameter "courseID" was null or undefined when calling courseGetCoursePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['courseID'] != null) {
            queryParameters['courseID'] = requestParameters['courseID'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/get_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGetCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取课程信息
     * 获取课程信息
     */
    async courseGetCoursePost(requestParameters: CourseGetCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGetCoursePost200Response> {
        const response = await this.courseGetCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取课程学生信息
     * 获取课程学生信息
     */
    async courseGetCourseStudentsPostRaw(requestParameters: CourseGetCourseStudentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGetCourseStudentsPost200Response>> {
        if (requestParameters['courseID'] == null) {
            throw new runtime.RequiredError(
                'courseID',
                'Required parameter "courseID" was null or undefined when calling courseGetCourseStudentsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['courseID'] != null) {
            queryParameters['courseID'] = requestParameters['courseID'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/get_course_students`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGetCourseStudentsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取课程学生信息
     * 获取课程学生信息
     */
    async courseGetCourseStudentsPost(requestParameters: CourseGetCourseStudentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGetCourseStudentsPost200Response> {
        const response = await this.courseGetCourseStudentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 加入课程
     * 加入课程
     */
    async courseJoinCoursePostRaw(requestParameters: CourseJoinCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseJoinCoursePost200Response>> {
        if (requestParameters['userID'] == null) {
            throw new runtime.RequiredError(
                'userID',
                'Required parameter "userID" was null or undefined when calling courseJoinCoursePost().'
            );
        }

        if (requestParameters['courseID'] == null) {
            throw new runtime.RequiredError(
                'courseID',
                'Required parameter "courseID" was null or undefined when calling courseJoinCoursePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userID'] != null) {
            queryParameters['userID'] = requestParameters['userID'];
        }

        if (requestParameters['courseID'] != null) {
            queryParameters['courseID'] = requestParameters['courseID'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/join_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseJoinCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 加入课程
     * 加入课程
     */
    async courseJoinCoursePost(requestParameters: CourseJoinCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseJoinCoursePost200Response> {
        const response = await this.courseJoinCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 扫描所有课程
     * 扫描所有课程
     */
    async courseScanAllCoursePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseScanAllCoursePost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/scan_all_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseScanAllCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 扫描所有课程
     * 扫描所有课程
     */
    async courseScanAllCoursePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseScanAllCoursePost200Response> {
        const response = await this.courseScanAllCoursePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * 扫描课程
     * 扫描课程
     */
    async courseScanCoursePostRaw(requestParameters: CourseScanCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseScanCoursePost200Response>> {
        if (requestParameters['userID'] == null) {
            throw new runtime.RequiredError(
                'userID',
                'Required parameter "userID" was null or undefined when calling courseScanCoursePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userID'] != null) {
            queryParameters['userID'] = requestParameters['userID'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course/scan_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseScanCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 扫描课程
     * 扫描课程
     */
    async courseScanCoursePost(requestParameters: CourseScanCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseScanCoursePost200Response> {
        const response = await this.courseScanCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

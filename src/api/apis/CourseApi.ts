/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CourseApiCreateChapterRequest,
  CourseApiCreateCourseRequest,
  CourseApiDeleteChapterRequest,
  CourseApiDeleteCourseRequest,
  CourseApiGenChapterScoreRequest,
  CourseApiGenCourseFinishRequest,
  CourseApiGetChaptersByUserIDRequest,
  CourseApiGetChaptersRequest,
  CourseApiGetCourseRequest,
  CourseApiGetCourseStudentsRequest,
  CourseApiJoinCourseRequest,
  CourseApiUpdateChapterRequest,
  CourseApiUpdateChapterTopicScoreRequest,
  CourseApiUpdateCourseRequest,
  CourseCreateChapterPost200Response,
  CourseCreateCoursePost200Response,
  CourseDeleteChapterPost200Response,
  CourseDeleteCoursePost200Response,
  CourseGenChapterScorePost200Response,
  CourseGenCourseFinishPost200Response,
  CourseGetChaptersByUserIdPost200Response,
  CourseGetChaptersPost200Response,
  CourseGetCoursePost200Response,
  CourseGetCourseStudentsPost200Response,
  CourseJoinCoursePost200Response,
  CourseScanAllCoursePost200Response,
  CourseScanCoursePost200Response,
  CourseUpdateChapterPost200Response,
  CourseUpdateCoursePost200Response,
  ResResponse,
} from '../models/index';
import {
    CourseApiCreateChapterRequestFromJSON,
    CourseApiCreateChapterRequestToJSON,
    CourseApiCreateCourseRequestFromJSON,
    CourseApiCreateCourseRequestToJSON,
    CourseApiDeleteChapterRequestFromJSON,
    CourseApiDeleteChapterRequestToJSON,
    CourseApiDeleteCourseRequestFromJSON,
    CourseApiDeleteCourseRequestToJSON,
    CourseApiGenChapterScoreRequestFromJSON,
    CourseApiGenChapterScoreRequestToJSON,
    CourseApiGenCourseFinishRequestFromJSON,
    CourseApiGenCourseFinishRequestToJSON,
    CourseApiGetChaptersByUserIDRequestFromJSON,
    CourseApiGetChaptersByUserIDRequestToJSON,
    CourseApiGetChaptersRequestFromJSON,
    CourseApiGetChaptersRequestToJSON,
    CourseApiGetCourseRequestFromJSON,
    CourseApiGetCourseRequestToJSON,
    CourseApiGetCourseStudentsRequestFromJSON,
    CourseApiGetCourseStudentsRequestToJSON,
    CourseApiJoinCourseRequestFromJSON,
    CourseApiJoinCourseRequestToJSON,
    CourseApiUpdateChapterRequestFromJSON,
    CourseApiUpdateChapterRequestToJSON,
    CourseApiUpdateChapterTopicScoreRequestFromJSON,
    CourseApiUpdateChapterTopicScoreRequestToJSON,
    CourseApiUpdateCourseRequestFromJSON,
    CourseApiUpdateCourseRequestToJSON,
    CourseCreateChapterPost200ResponseFromJSON,
    CourseCreateChapterPost200ResponseToJSON,
    CourseCreateCoursePost200ResponseFromJSON,
    CourseCreateCoursePost200ResponseToJSON,
    CourseDeleteChapterPost200ResponseFromJSON,
    CourseDeleteChapterPost200ResponseToJSON,
    CourseDeleteCoursePost200ResponseFromJSON,
    CourseDeleteCoursePost200ResponseToJSON,
    CourseGenChapterScorePost200ResponseFromJSON,
    CourseGenChapterScorePost200ResponseToJSON,
    CourseGenCourseFinishPost200ResponseFromJSON,
    CourseGenCourseFinishPost200ResponseToJSON,
    CourseGetChaptersByUserIdPost200ResponseFromJSON,
    CourseGetChaptersByUserIdPost200ResponseToJSON,
    CourseGetChaptersPost200ResponseFromJSON,
    CourseGetChaptersPost200ResponseToJSON,
    CourseGetCoursePost200ResponseFromJSON,
    CourseGetCoursePost200ResponseToJSON,
    CourseGetCourseStudentsPost200ResponseFromJSON,
    CourseGetCourseStudentsPost200ResponseToJSON,
    CourseJoinCoursePost200ResponseFromJSON,
    CourseJoinCoursePost200ResponseToJSON,
    CourseScanAllCoursePost200ResponseFromJSON,
    CourseScanAllCoursePost200ResponseToJSON,
    CourseScanCoursePost200ResponseFromJSON,
    CourseScanCoursePost200ResponseToJSON,
    CourseUpdateChapterPost200ResponseFromJSON,
    CourseUpdateChapterPost200ResponseToJSON,
    CourseUpdateCoursePost200ResponseFromJSON,
    CourseUpdateCoursePost200ResponseToJSON,
    ResResponseFromJSON,
    ResResponseToJSON,
} from '../models/index';

export interface CourseCreateChapterPostRequest {
    data: CourseApiCreateChapterRequest;
}

export interface CourseCreateCoursePostRequest {
    data: CourseApiCreateCourseRequest;
}

export interface CourseDeleteChapterPostRequest {
    data: CourseApiDeleteChapterRequest;
}

export interface CourseDeleteCoursePostRequest {
    data: CourseApiDeleteCourseRequest;
}

export interface CourseGenChapterScorePostRequest {
    data: CourseApiGenChapterScoreRequest;
}

export interface CourseGenCourseFinishPostRequest {
    data: CourseApiGenCourseFinishRequest;
}

export interface CourseGetChaptersByUserIdPostRequest {
    data: CourseApiGetChaptersByUserIDRequest;
}

export interface CourseGetChaptersPostRequest {
    data: CourseApiGetChaptersRequest;
}

export interface CourseGetCoursePostRequest {
    data: CourseApiGetCourseRequest;
}

export interface CourseGetCourseStudentsPostRequest {
    data: CourseApiGetCourseStudentsRequest;
}

export interface CourseJoinCoursePostRequest {
    data: CourseApiJoinCourseRequest;
}

export interface CourseScanAllCoursePostRequest {
    data: object;
}

export interface CourseScanCoursePostRequest {
    data: object;
}

export interface CourseUpdateChapterPostRequest {
    data: CourseApiUpdateChapterRequest;
}

export interface CourseUpdateChapterTopicScorePostRequest {
    data: CourseApiUpdateChapterTopicScoreRequest;
}

export interface CourseUpdateCoursePostRequest {
    data: CourseApiUpdateCourseRequest;
}

/**
 * 
 */
export class CourseApi extends runtime.BaseAPI {

    /**
     * 创建章节
     * 创建章节
     */
    async courseCreateChapterPostRaw(requestParameters: CourseCreateChapterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseCreateChapterPost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseCreateChapterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/create_chapter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiCreateChapterRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseCreateChapterPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 创建章节
     * 创建章节
     */
    async courseCreateChapterPost(requestParameters: CourseCreateChapterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseCreateChapterPost200Response> {
        const response = await this.courseCreateChapterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建课程
     * 创建课程
     */
    async courseCreateCoursePostRaw(requestParameters: CourseCreateCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseCreateCoursePost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseCreateCoursePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/create_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiCreateCourseRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseCreateCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 创建课程
     * 创建课程
     */
    async courseCreateCoursePost(requestParameters: CourseCreateCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseCreateCoursePost200Response> {
        const response = await this.courseCreateCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除章节
     * 删除章节
     */
    async courseDeleteChapterPostRaw(requestParameters: CourseDeleteChapterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseDeleteChapterPost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseDeleteChapterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/delete_chapter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiDeleteChapterRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseDeleteChapterPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 删除章节
     * 删除章节
     */
    async courseDeleteChapterPost(requestParameters: CourseDeleteChapterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseDeleteChapterPost200Response> {
        const response = await this.courseDeleteChapterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除课程
     * 删除课程
     */
    async courseDeleteCoursePostRaw(requestParameters: CourseDeleteCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseDeleteCoursePost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseDeleteCoursePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/delete_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiDeleteCourseRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseDeleteCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 删除课程
     * 删除课程
     */
    async courseDeleteCoursePost(requestParameters: CourseDeleteCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseDeleteCoursePost200Response> {
        const response = await this.courseDeleteCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生成章节分数
     * 生成章节分数
     */
    async courseGenChapterScorePostRaw(requestParameters: CourseGenChapterScorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGenChapterScorePost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseGenChapterScorePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/gen_chapter_score`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiGenChapterScoreRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGenChapterScorePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 生成章节分数
     * 生成章节分数
     */
    async courseGenChapterScorePost(requestParameters: CourseGenChapterScorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGenChapterScorePost200Response> {
        const response = await this.courseGenChapterScorePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 生成课程完成状态
     * 生成课程完成状态
     */
    async courseGenCourseFinishPostRaw(requestParameters: CourseGenCourseFinishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGenCourseFinishPost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseGenCourseFinishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/gen_course_finish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiGenCourseFinishRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGenCourseFinishPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 生成课程完成状态
     * 生成课程完成状态
     */
    async courseGenCourseFinishPost(requestParameters: CourseGenCourseFinishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGenCourseFinishPost200Response> {
        const response = await this.courseGenCourseFinishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取章节信息
     * 获取章节信息
     */
    async courseGetChaptersByUserIdPostRaw(requestParameters: CourseGetChaptersByUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGetChaptersByUserIdPost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseGetChaptersByUserIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/get_chapters_by_user_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiGetChaptersByUserIDRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGetChaptersByUserIdPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取章节信息
     * 获取章节信息
     */
    async courseGetChaptersByUserIdPost(requestParameters: CourseGetChaptersByUserIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGetChaptersByUserIdPost200Response> {
        const response = await this.courseGetChaptersByUserIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取课程章节列表
     * 获取课程章节列表
     */
    async courseGetChaptersPostRaw(requestParameters: CourseGetChaptersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGetChaptersPost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseGetChaptersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/get_chapters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiGetChaptersRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGetChaptersPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取课程章节列表
     * 获取课程章节列表
     */
    async courseGetChaptersPost(requestParameters: CourseGetChaptersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGetChaptersPost200Response> {
        const response = await this.courseGetChaptersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取课程信息
     * 获取课程信息
     */
    async courseGetCoursePostRaw(requestParameters: CourseGetCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGetCoursePost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseGetCoursePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/get_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiGetCourseRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGetCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取课程信息
     * 获取课程信息
     */
    async courseGetCoursePost(requestParameters: CourseGetCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGetCoursePost200Response> {
        const response = await this.courseGetCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取课程学生信息
     * 获取课程学生信息
     */
    async courseGetCourseStudentsPostRaw(requestParameters: CourseGetCourseStudentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseGetCourseStudentsPost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseGetCourseStudentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/get_course_students`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiGetCourseStudentsRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseGetCourseStudentsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取课程学生信息
     * 获取课程学生信息
     */
    async courseGetCourseStudentsPost(requestParameters: CourseGetCourseStudentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseGetCourseStudentsPost200Response> {
        const response = await this.courseGetCourseStudentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 加入课程
     * 加入课程
     */
    async courseJoinCoursePostRaw(requestParameters: CourseJoinCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseJoinCoursePost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseJoinCoursePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/join_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiJoinCourseRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseJoinCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 加入课程
     * 加入课程
     */
    async courseJoinCoursePost(requestParameters: CourseJoinCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseJoinCoursePost200Response> {
        const response = await this.courseJoinCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 扫描所有课程
     * 扫描所有课程
     */
    async courseScanAllCoursePostRaw(requestParameters: CourseScanAllCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseScanAllCoursePost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseScanAllCoursePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/scan_all_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['data'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseScanAllCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 扫描所有课程
     * 扫描所有课程
     */
    async courseScanAllCoursePost(requestParameters: CourseScanAllCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseScanAllCoursePost200Response> {
        const response = await this.courseScanAllCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 扫描课程
     * 扫描课程
     */
    async courseScanCoursePostRaw(requestParameters: CourseScanCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseScanCoursePost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseScanCoursePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/scan_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['data'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseScanCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 扫描课程
     * 扫描课程
     */
    async courseScanCoursePost(requestParameters: CourseScanCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseScanCoursePost200Response> {
        const response = await this.courseScanCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新章节
     * 更新章节
     */
    async courseUpdateChapterPostRaw(requestParameters: CourseUpdateChapterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseUpdateChapterPost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseUpdateChapterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/update_chapter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiUpdateChapterRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseUpdateChapterPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 更新章节
     * 更新章节
     */
    async courseUpdateChapterPost(requestParameters: CourseUpdateChapterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseUpdateChapterPost200Response> {
        const response = await this.courseUpdateChapterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新章节话题分数
     * 更新章节话题分数
     */
    async courseUpdateChapterTopicScorePostRaw(requestParameters: CourseUpdateChapterTopicScorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResResponse>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseUpdateChapterTopicScorePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/update_chapter_topic_score`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiUpdateChapterTopicScoreRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResResponseFromJSON(jsonValue));
    }

    /**
     * 更新章节话题分数
     * 更新章节话题分数
     */
    async courseUpdateChapterTopicScorePost(requestParameters: CourseUpdateChapterTopicScorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResResponse> {
        const response = await this.courseUpdateChapterTopicScorePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新课程
     * 更新课程
     */
    async courseUpdateCoursePostRaw(requestParameters: CourseUpdateCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseUpdateCoursePost200Response>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling courseUpdateCoursePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/course/update_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseApiUpdateCourseRequestToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseUpdateCoursePost200ResponseFromJSON(jsonValue));
    }

    /**
     * 更新课程
     * 更新课程
     */
    async courseUpdateCoursePost(requestParameters: CourseUpdateCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseUpdateCoursePost200Response> {
        const response = await this.courseUpdateCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
